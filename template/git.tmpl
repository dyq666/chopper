# 参考笔记
# git 开发规范 https://llp0574.github.io/2016/11/25/git-use/

# 初始化 ( 拿到一台新的机器 ), 这三条命令实际上对应下面 push 和 user 的配置
# git config --global user.name <name>
# git config --global user.email <email>
# git config --global push.default current

# 初始化 ( fork 了一个新的 repo )
# git remote add origin <fork_repo>
# git remote add upstream <public_repo>
# (option) git config user.name <name>
# (option) git config config user.email <email>

# alias 中的命令起始字母缩写的全称
# n -> new    增
# d -> delete 删
# c -> change 改
# v -> view   查
# l -> list   列

# alias 中注释的意义
# 1. <xx> 代表命令后面需要参数, 例如 `c = commit -m  # <msg>`, 实际使用 `git c 'init project'`

# 文件状态转移图 (恢复命令的 alias 都在下面的 alias.recover 中)
#
#                                            commited
#
#                            g reset HEAD^ <-   ^    -> g reset HEAD^
#                                             g commit
#                                               |
#
# default           untracked                 staged                 modified                  unmodified
#         touch ->                   g add ->        <- g add                 <- vim | rm
#
#         rm    <-            g reset HEAD <-        -> g reset HEAD          -> g checkout --

[alias]
    # add & commit
    a = add
    aa = add -A
    aac = !git add -A && git commit -m  # <msg>
    aacfix = !git add -A && git commit --amend  # 与上一个 commit 合并
    c = commit -m  # <msg>
    cmsg = commit --amend  # 修改最后一个 commit 的 msg

    # branch
    nb = checkout -b  # <branch>
    db = branch -D  # <branch>
    cb = checkout  # <branch>
    cbm = checkout master
    lb = !git branch | cat

    # stash
    nsh = stash push --include-untracked  # 存储所有状态的文件
    dsh = stash drop
    lsh = !git stash list | cat
    popsh = stash pop
    dallsh = stash clear

    # push & pull
    p = push
    pf = push -f
    pullcurrent = !git pull origin $(git rev-parse --abbrev-ref HEAD)  # 将 origin 中与当前分支同名的分支 pull 下来
    update = pull upstream master

    # remote
    norigin = remote add origin  # <repo_path>
    nupstream = remote add upstream  # <repo_path>
    lrem = remote -v

    # rebase
    ri = rebase -i  # <commit_id>
    mergeri = rebase -i HEAD^^  # 通常用于合并前两个 commit
    mergefirstri = rebase -i --root  # 从第一个 commit 开始 rebase

    # recover
    recoveradd = reset HEAD       # <file>  staged    -> modified | untracked
    recovercommit = reset HEAD^   #         commited  -> modified | untracked
    recovermodify = checkout --   # <file>  modified  -> unmodified
    recovertouch = !rm            # <file>  untracked -> default
    resetallcommit = update-ref -d HEAD  # 重置所有 commit, 仅用于项目初期

    # status
    d = diff  # unstaged
    dfstaged = diff --staged
    s = status --short
    sall = status

    # log
    lgall = log --color --graph --abbrev-commit \
            --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
    lg = !git lgall | head -5

    # config
    lconfig = config --list --show-origin

[color]
    ui = true

[push]
    default = current

[user]
    name = {name}
    email = {email}
