# 参考笔记
# 开发规范 https://llp0574.github.io/2016/11/25/git-use/
# 官方推荐书 https://git-scm.com/book/en/v2

# 初始化 ( 拿到一台新的机器 ), 这三条命令实际上对应下面 push 和 user 的配置
# git config --global user.name <name>
# git config --global user.email <email>
# git config --global push.default current

# 初始化 ( fork 了一个新的 repo )
# git remote add origin <fork_repo>
# git remote add upstream <public_repo>
# (option) git config user.name <name>
# (option) git config config user.email <email>

# 文件状态转移图 (恢复命令的 alias 都在下面的 alias.recover 中)
#
#                                            commited
#
#                            g reset HEAD^ <-   ^    -> g reset HEAD^
#                                             g commit
#                                               |
#
# default           untracked                 staged                 modified                  unmodified
#         touch ->                   g add ->        <- g add                 <- vim | rm
#
#         rm    <-            g reset HEAD <-        -> g reset HEAD          -> g checkout --

# 合并分支
# merge, 1 fast-forward, 如果当前的分支最后一个 commit 是即将被合并分支的祖先,
#                        那么合并策略是直接将当前分支移动到被合并分支的最后一个 commit.
#
#        2 normal-merge, 如果当前的分支最后一个 commit 不是即将被合并分支的祖先,
#                        那么就从二者最近的共同祖先开始, 到双方最后一个 commit 进行合并.
#                        如果没有冲突, 那么 git 会自动创建一个新的 commit 作为二者合并的 commit,
#                        如果有冲突, 那么就需要手动解决冲突后, 执行 add & commit, 此 commit 作为二者合并的 commit.
#
# rebase, 1 无冲突, 通常是新分支 rebase 旧分支, 然后旧分支再 merge 新分支.
#                  新分支 rebase 旧分支后, 就将旧分支在创建新分支后修改的内容, 同步到新分支的 commit 的历史中,
#                  这样旧分支的最后一个 commit 是新分支的祖先了. 然后在执行 merge, 就会使用 fast-forward 策略.
#
#         2 有冲突, 新分支 rebase 旧分支后有冲突, 使用 add & rebase --continue (这部分命令在 shell 中会有提示, 不用记住) 解决冲突,
#                  就与无冲突步骤相同了.

[alias]
    # alias 中的命令起始字母缩写的全称
    # n -> new    增
    # d -> delete 删
    # c -> change 改
    # v -> view   查
    # l -> list   列

    # alias 中注释的意义
    # 1. <xx> 代表命令后面需要参数, 例如 `c = commit -m  # <msg>`, 实际使用 `git c 'init project'`

    # add & commit
    a = add
    aa = add -A
    aac = !git add -A && git commit -m  # <msg>
    aacfix = !git add -A && git commit --amend  # 与上一个 commit 合并
    c = commit -m  # <msg>
    cmsg = commit --amend  # 修改最后一个 commit 的 msg

    # branch
    nb = checkout -b  # <branch>, 创建并切换到新分支
    db = branch -D  # <branch>, 无论分支是否被 merged 都允许被删除. 如果只允许删除 merged 的分支, 那么使用 -d 代替 -D
    cb = checkout  # <branch>
    cbm = checkout master
    lb = !git branch -v | cat

    # stash
    nsh = stash push --include-untracked  # 存储所有状态的文件
    dsh = stash drop
    lsh = !git stash list | cat
    popsh = stash pop
    dallsh = stash clear

    # push & pull
    p = push
    pf = push -f
    pullcurrent = !git pull origin $(git rev-parse --abbrev-ref HEAD)  # 将 origin 中与当前分支同名的分支 pull 下来
    update = pull upstream master
    updaterebase = pull upstream master --rebase

    # remote
    norigin = remote add origin  # <repo_path>
    nupstream = remote add upstream  # <repo_path>
    lrem = remote -v

    # rebase
    ri = rebase -i  # <commit_id>
    ri2 = rebase -i HEAD^^  # 通常用于 rebase 最后两个 commit
    riall = rebase -i --root  # rebase 所有 commit

    # recover
    recoveradd = reset HEAD       # <file>  staged    -> modified | untracked
    recovercommit = reset HEAD^   #         commited  -> modified | untracked
    recovermodify = checkout --   # <file>  modified  -> unmodified
    recovertouch = !rm            # <file>  untracked -> default
    resetallcommit = update-ref -d HEAD  # 重置所有 commit, 仅用于项目初期

    # status
    d = diff  # unstaged
    dfstaged = diff --staged
    s = status --short
    sall = status

    # log
    lgall = log --color --graph --abbrev-commit \
            --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset'
    lg = !git lgall | head -5

    # config
    lconfig = config --list --show-origin

[color]
    ui = true

[push]
    default = current

[user]
    name = {name}
    email = {email}
